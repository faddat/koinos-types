{%- macro vector(tref) -%}
[]{{typeref(tref["targs"][0])}}
{%- endmacro -%}

{%- macro template(targs) -%}
<
{%- for arg in targs -%}
{{typeref(arg)}}{{"," if not loop.last}}
{%- endfor -%}
>
{%- endmacro -%}

{%- macro fixed_blob(tref) -%}
{%- set length = typeref(tref["targs"][0]) -%}
FixedBlob{{length}}{{decl_fixed_blob(length)}}
{%- endmacro -%}

{%- macro variant(tref) -%}
{{tref["name"]}}
{%- endmacro -%}

{%- macro typeref(tref) -%}
{%- if tref["info"]["type"] == "IntLiteral" %}{{tref["value"]}}
{%- elif tref["name"][-1] == "vector" -%}{{vector(tref)}}
{%- elif tref["name"][-1] == "fixed_blob" -%}{{fixed_blob(tref)}}
{%- elif tref["name"][-1] == "boolean" -%}Boolean
{%- else -%}
{{go_name(tref["name"][-1])}}
{%- if tref["targs"] is not none -%}{{template(tref["targs"])}}{%- endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro struct_serialization(decl) -%}
func (n {{go_name(decl["name"])}}) Serialize(vb VariableBlob) VariableBlob {
{%- for field in decl["fields"] %}
    vb = n.{{go_name(field["name"])}}.Serialize(vb){% endfor %}
    return vb
}
{%- endmacro -%}

{%- macro struct_deserialization(decl) -%}
func Deserialize{{go_name(decl["name"])}}(vb VariableBlob) (uint64,{{go_name(decl["name"])}}) {
    var i,j uint64 = 0,0
    s := {{go_name(decl["name"])}}{}
{%- for field in decl["fields"] %}
    {%- set tname = typeref(field["tref"]) %}
    j,s.{{go_name(field["name"])}} = Deserialize{{tname}}(vb[i:]); i+=j{% endfor %}
    return i, s
}
{%- endmacro -%}

{%- macro struct(decl) -%}
{%- set sname = go_name(decl["name"]) -%}
// ----------------------------------------
//  Struct: {{sname}}
// ----------------------------------------

{# // {{decl}} #}type {{sname}} struct {
{% if decl["fields"]|length > 0 -%}
{%- for field in decl["fields"] %}    {{go_name(field["name"])}} {{typeref(field["tref"])}}
{% endfor %}
{%- endif -%}
}

{{struct_serialization(decl)}}

{{struct_deserialization(decl)}}
{% endmacro -%}

{%- macro typedef(decl) -%}
{%- if decl["tref"]["name"][-1] == "variant" -%}
{{variant_def(decl)}}
{%- else -%}
{{basic_typedef(decl)}}
{%- endif %}
{% endmacro -%}

{%- macro variant_def(decl) -%}
{%- set varname = go_name(decl["name"]) -%}
// ----------------------------------------
//  Variant: {{varname}}
// ----------------------------------------

type {{varname}} Serializeable

func (n {{varname}}) Serialize(vb VariableBlob) VariableBlob {
    
}

func Deserialize{{varname}}(vb VariableBlob) (uint32,{{varname}}) {
    
}

{%- endmacro -%}

{%- macro basic_typedef(decl) -%}
{%- set tname = go_name(decl["name"])-%}
{%- set rname = typeref(decl["tref"])-%}
// ----------------------------------------
//  Typedef: {{tname}}
// ----------------------------------------

type {{tname}} {{rname}}

func (n {{tname}}) Serialize(vb VariableBlob) VariableBlob {
    return {{rname}}(n).Serialize(vb)
}

func Deserialize{{tname}}(vb VariableBlob) (uint64,{{tname}}) {
    i,n := Deserialize{{rname}}(vb)
    return i,{{tname}}(n)
}

{%- endmacro -%}

{%- macro enum(decl) -%}
{%- set ename = go_name(decl["name"]) -%}
// ----------------------------------------
//  Enum: {{ename}}
// ----------------------------------------

type {{ename}} UInt32

const (
{%- for entry in decl["entries"] %}
    {{go_name(entry["name"])}} {{ename}} = {{entry["value"]}}
{%- endfor %}
)

func (n {{ename}}) Serialize(vb VariableBlob) VariableBlob {
    return UInt32(n).Serialize(vb)
}

func Deserialize{{ename}}(vb VariableBlob) (uint32,uint32) {
    return DeserializeUInt32(vb)
}

{% endmacro -%}

{%- macro generate_fixed_blobs() -%}
{% for length in get_fixed_blobs() -%}
{%- set fbname='FixedBlob'+length -%}
// ----------------------------------------
//  {{fbname}}
// ----------------------------------------

type {{fbname}} [{{length}}]byte

func (n {{fbname}}) Serialize(vb VariableBlob) VariableBlob {
    return append(vb, n[:]...)
}

func Deserialize{{fbname}}(vb VariableBlob) (uint32,{{fbname}}) {
    var result {{fbname}}
    copy(result[:], vb)
    return {{length}},result
}

{% endfor %}
{% endmacro -%}

//   ____                           _           _    ____          _
//  / ___| ___ _ __   ___ _ __ __ _| |_ ___  __| |  / ___|___   __| | ___
// | |  _ / _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` | | |   / _ \ / _` |/ _ \
// | |_| |  __/ | | |  __/ | | (_| | ||  __/ (_| | | |__| (_) | (_| |  __/
//  \____|\___|_| |_|\___|_|  \__,_|\__\___|\__,_|  \____\___/ \__,_|\___|
//                         Please do not modify

{% for name, decl in decls_by_name.items() -%}
{% if decl["info"]["type"] == "Struct" %}{{struct(decl)}}
{% elif decl["info"]["type"] == "Typedef" %}{{typedef(decl)}}
{# {%- elif decl["info"]["type"] == "BaseType" -%} #}
{% elif decl["info"]["type"] == "EnumClass" %}{{enum(decl)}}
{# {%- else -%}// TODO: Unimplemented {{decl}} #}
{%- endif -%}

{% endfor %}
{{generate_fixed_blobs()}}
