{%- macro vector(tref) -%}
[]{{typeref(tref["targs"][0])}}
{%- endmacro -%}

{%- macro template(targs) -%}
<
{%- for arg in targs -%}
{{typeref(arg)}}{{"," if not loop.last}}
{%- endfor -%}
>
{%- endmacro -%}

{%- macro fixed_blob(tref) -%}
[{{typeref(tref["targs"][0])}}]FixedBlob
{%- endmacro -%}

{%- macro variant(tref) -%}
Serializeable{}{# TODO: Generate a struct for each variant that enforces desired types #}
{%- endmacro -%}

{%- macro typeref(tref) -%}
{%- if tref["info"]["type"] == "IntLiteral" %}{{tref["value"]}}
{%- elif tref["name"][-1] == "vector" -%}{{vector(tref)}}
{%- elif tref["name"][-1] == "fixed_blob" -%}{{fixed_blob(tref)}}
{%- elif tref["name"][-1] == "variant" -%}{{variant(tref)}}
{%- elif tref["name"][-1] == "boolean" -%}Boolean
{%- else -%}
{{go_name(tref["name"][-1])}}
{%- if tref["targs"] is not none -%}{{template(tref["targs"])}}{%- endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro struct_serialization(decl) -%}
func (n {{go_name(decl["name"])}}) Serialize(vb VariableBlob) VariableBlob {
{%- for field in decl["fields"] %}
    vb = {{go_name(field["name"])}}.Serialize(vb){% endfor %}
    return vb
}
{%- endmacro -%}

{%- macro struct_deserialization(decl) -%}
func Deserialize{{go_name(decl["name"])}}(vb VariableBlob) (uint64,{{go_name(decl["name"])}}) {
    var i,j uint64 = 0,0
    s := {{go_name(decl["name"])}}{}
{%- for field in decl["fields"] %}
    {%- set tname = typeref(field["tref"]) %}
    j,s.{{go_name(field["name"])}} = Deserialize{{tname}}(vb[i:]) (uint64,{{tname}}); i+=j{% endfor %}
    return i, s
}
{%- endmacro -%}

{%- macro struct(decl) -%}
{%- set sname = go_name(decl["name"]) -%}
// ----------------------------------------
//  Struct: {{sname}}
// ----------------------------------------

{# // {{decl}} #}type {{sname}} struct {
{% if decl["fields"]|length > 0 -%}
{%- for field in decl["fields"] %}    {{go_name(field["name"])}} {{typeref(field["tref"])}}
{% endfor %}
{%- endif -%}
}

{{struct_serialization(decl)}}

{{struct_deserialization(decl)}}
{% endmacro -%}

{%- macro typedef(decl) -%}
type {{go_name(decl["name"])}} {{typeref(decl["tref"])}}
{% endmacro -%}

{%- macro enum(decl) -%}
// ----------------------------------------
//  Enum: go_name({{decl["name"]}})
// ----------------------------------------

type {{decl["name"]}} UInt64

const (
{%- for entry in decl["entries"] %}
    {{go_name(entry["name"])}} {{go_name(decl["name"])}} = {{entry["value"]}}
{%- endfor %}
)
{% endmacro -%}

{%- for name, decl in decls_by_name.items() -%}
{% if decl["info"]["type"] == "Struct" %}{{struct(decl)}}
{% elif decl["info"]["type"] == "Typedef" %}{{typedef(decl)}}
{% elif decl["info"]["type"] == "BaseType" %}{# Ignore base types for now #}
{% elif decl["info"]["type"] == "EnumClass" %}{{enum(decl)}}
{# {%- else -%}// TODO: Unimplemented {{decl}} #}
{%- endif -%}

{% endfor %}
