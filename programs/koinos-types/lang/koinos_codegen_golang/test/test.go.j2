package main

import (
   "encoding/binary"
   "encoding/json"
   "flag"
   "io/ioutil"
   . "koinos"
)

func main() {
   binPtr  := flag.String("binary", "types.bin", "The binary output file")
   jsonPtr := flag.String("json", "types.json", "The JSON output file")

   flag.Parse()

   var arr []interface{}
   bin := NewVariableBlob()

   {% for test in test_cases %}
   {
      var t {{ go_name(test.typename) }}
      jsonBlob := []byte("{{ test.json }}")
      err := json.Unmarshal(jsonBlob, &t)
      if err != nil {
         panic(err)
      }

      arr = append(arr, t)

      ser := NewVariableBlob()
      ser = t.Serialize(ser)
      b := make([]byte, 4)
      binary.BigEndian.PutUint32(b, uint32(len(*ser)))
      b = append(b, *ser...)
      new_bin := append(*bin, b...)
      bin = &new_bin
   }
   {% endfor %}

   json_blob, err := json.Marshal(arr)
   if err != nil {
      panic(err)
   }

   ioutil.WriteFile(*binPtr, []byte(*bin), 0644 )
   ioutil.WriteFile(*jsonPtr, json_blob, 0644 )
}
