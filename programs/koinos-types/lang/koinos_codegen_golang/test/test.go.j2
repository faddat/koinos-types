package main

import (
   "encoding/json"
   "flag"
   "io/ioutil"
   "os"
   . "koinos"
)

func main() {
   binPtr  := flag.String("binary", "types.bin", "The binary output file")
   jsonPtr := flag.String("json", "types.json", "The JSON output file")

   flag.Parse()

   var arr [][]byte
   bin := NewVariableBlob()

   {% for test in test_cases %}
   {
      var t {{ go_name(test.typename) }}
      jsonBlob := []byte("{{ test.json }}")
      err := json.Unmarshal(jsonBlob, &t)
      if err != nil {
         panic(err)
      }
      jsonBlob, err = json.Marshal(t)
      if err != nil {
         panic(err)
      }
      arr = append(arr, jsonBlob)
      bin = t.Serialize(bin)
   }
   {% endfor %}

   ioutil.WriteFile(*binPtr, []byte(*bin), 0644 )

   f, err := os.OpenFile(*jsonPtr, os.O_CREATE | os.O_WRONLY, 0644)
   if err != nil {
      panic(err)
   }

   defer f.Close()

   for i := range arr {
      if _, err := f.WriteString(string(arr[i])); err != nil {
         panic(err)
      }
   }
}
