package main

import (
	"encoding/binary"
	"encoding/json"
	"flag"
	"io/ioutil"
	"koinos"
)

func main() {
	binPtr  := flag.String("binary", "types.bin", "The binary output file")
	jsonPtr := flag.String("json", "types.json", "The JSON output file")

	flag.Parse()

	var arr []interface{}
	bin := koinos.NewVariableBlob()

	{% for test in test_cases %}
	{
		var t koinos.{{ go_name(test.typename) }}
		jsonBlob := []byte("{{ test.json }}")
		err := json.Unmarshal(jsonBlob, &t)
		if err != nil {
			panic(err)
		}

		ser := koinos.NewVariableBlob()
		ser = t.Serialize(ser)
		b := make([]byte, 4)
		binary.BigEndian.PutUint32(b, uint32(len(*ser)))
		b = append(b, *ser...)
		newBin := append(*bin, b...)
		bin = &newBin

		n, obj, err := koinos.Deserialize{{ go_name(test.typename) }}(ser)
		if err != nil {
			panic(err)
		}
		if n != uint64(len(*ser)) {
			panic("Not all bytes were consumed when deserializing from binary.")
		}

		arr = append(arr, *obj)
	}
	{% endfor %}

	jsonBlob, err := json.Marshal(arr)
	if err != nil {
		panic(err)
	}

	ioutil.WriteFile(*binPtr, []byte(*bin), 0644 )
	ioutil.WriteFile(*jsonPtr, jsonBlob, 0644 )
}
